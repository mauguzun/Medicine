// <auto-generated />
using System;
using Medicine.Infrastructure.Implementation.DataAccesMssql;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Medicine.Infrastructure.Implementation.DataAccesMssql.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20230531183109_first")]
    partial class first
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.HasSequence("TransatedEntityWithDescriptionSequence");

            modelBuilder.Entity("DrugDrugCategory", b =>
                {
                    b.Property<int>("DrugCategoriesId")
                        .HasColumnType("int");

                    b.Property<int>("DrugsId")
                        .HasColumnType("int");

                    b.HasKey("DrugCategoriesId", "DrugsId");

                    b.HasIndex("DrugsId");

                    b.ToTable("DrugDrugCategory");
                });

            modelBuilder.Entity("Medicine.Entities.Models.ActiveElement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("DrugId")
                        .HasColumnType("int");

                    b.Property<double>("Quantity")
                        .HasColumnType("float");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DrugId");

                    b.HasIndex("UserId");

                    b.ToTable("ActiveElements");
                });

            modelBuilder.Entity("Medicine.Entities.Models.Auth.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "User"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Doctor"
                        });
                });

            modelBuilder.Entity("Medicine.Entities.Models.Auth.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Birthday")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<int>("Language")
                        .HasColumnType("int");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Sex")
                        .HasColumnType("int");

                    b.Property<string>("TimeZone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Medicine.Entities.Models.Course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CourseGroupID")
                        .HasColumnType("int");

                    b.Property<int>("CourseType")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("TherapyId")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CourseGroupID");

                    b.HasIndex("TherapyId");

                    b.HasIndex("UserId");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("Medicine.Entities.Models.CourseSettings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("MaxAge")
                        .HasColumnType("int");

                    b.Property<int?>("MinAge")
                        .HasColumnType("int");

                    b.Property<int>("Sex")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("Weight")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("UserId");

                    b.ToTable("CourseSettings");
                });

            modelBuilder.Entity("Medicine.Entities.Models.DosageLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("DosageRecommendationId")
                        .HasColumnType("int");

                    b.Property<double>("Quantity")
                        .HasColumnType("float");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DosageRecommendationId");

                    b.HasIndex("UserId");

                    b.ToTable("DosageLogs");
                });

            modelBuilder.Entity("Medicine.Entities.Models.DosingFrequency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("DrugId")
                        .HasColumnType("int");

                    b.Property<int>("IntervalInDays")
                        .HasColumnType("int");

                    b.Property<double>("Total")
                        .HasColumnType("float");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("DrugId");

                    b.HasIndex("UserId");

                    b.ToTable("DosingFrequencies");
                });

            modelBuilder.Entity("Medicine.Entities.Models.DosingFrequencyReminder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("DosingFrequencyId")
                        .HasColumnType("int");

                    b.Property<double>("Quantity")
                        .HasColumnType("float");

                    b.Property<int>("ReminderId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("UsingDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DosingFrequencyId");

                    b.HasIndex("ReminderId");

                    b.HasIndex("UserId");

                    b.ToTable("DosageRecommendations");
                });

            modelBuilder.Entity("Medicine.Entities.Models.Drug", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<double>("OneUnitSizeInGramm")
                        .HasColumnType("float");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Drugs");
                });

            modelBuilder.Entity("Medicine.Entities.Models.DrugCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("DrugId")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("DrugCategories");
                });

            modelBuilder.Entity("Medicine.Entities.Models.Reminder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Descrptioin")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TimeInUtc")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Reminders");
                });

            modelBuilder.Entity("Medicine.Entities.Models.Therapy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Therapies");
                });

            modelBuilder.Entity("Medicine.Entities.Models.Translated.Base.TransatedEntityWithDescription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("NEXT VALUE FOR [TransatedEntityWithDescriptionSequence]");

                    SqlServerPropertyBuilderExtensions.UseSequence(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Language")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable((string)null);

                    b.UseTpcMappingStrategy();
                });

            modelBuilder.Entity("Medicine.Entities.Models.Translated.TranslatedDosingFrequencyReminder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("DosageRecommendationId")
                        .HasColumnType("int");

                    b.Property<int>("Language")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("UsingDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DosageRecommendationId");

                    b.HasIndex("UserId");

                    b.ToTable("TranslatedDosingFrequencyReminder");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Medicine.Entities.Models.CourseGroup", b =>
                {
                    b.HasBaseType("Medicine.Entities.Models.Translated.Base.TransatedEntityWithDescription");

                    b.HasIndex("UserId");

                    b.ToTable("CourseGroup");
                });

            modelBuilder.Entity("Medicine.Entities.Models.Translated.TranslatedActiveElement", b =>
                {
                    b.HasBaseType("Medicine.Entities.Models.Translated.Base.TransatedEntityWithDescription");

                    b.Property<int>("ActiveElementId")
                        .HasColumnType("int");

                    b.HasIndex("ActiveElementId");

                    b.HasIndex("UserId");

                    b.ToTable("TranslatedActiveElement");
                });

            modelBuilder.Entity("Medicine.Entities.Models.Translated.TranslatedCourse", b =>
                {
                    b.HasBaseType("Medicine.Entities.Models.Translated.Base.TransatedEntityWithDescription");

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<string>("Version")
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("CourseId");

                    b.HasIndex("UserId");

                    b.ToTable("TranslatedCourse");
                });

            modelBuilder.Entity("Medicine.Entities.Models.Translated.TranslatedCourseGroup", b =>
                {
                    b.HasBaseType("Medicine.Entities.Models.Translated.Base.TransatedEntityWithDescription");

                    b.Property<int>("CourseGroupId")
                        .HasColumnType("int");

                    b.HasIndex("CourseGroupId");

                    b.HasIndex("UserId");

                    b.ToTable("TranslatedCourseGroup");
                });

            modelBuilder.Entity("Medicine.Entities.Models.Translated.TranslatedDosingFrequency", b =>
                {
                    b.HasBaseType("Medicine.Entities.Models.Translated.Base.TransatedEntityWithDescription");

                    b.Property<int>("DosingFrequencyId")
                        .HasColumnType("int");

                    b.HasIndex("DosingFrequencyId");

                    b.HasIndex("UserId");

                    b.ToTable("TranslatedDosingFrequency");
                });

            modelBuilder.Entity("Medicine.Entities.Models.Translated.TranslatedDrugs", b =>
                {
                    b.HasBaseType("Medicine.Entities.Models.Translated.Base.TransatedEntityWithDescription");

                    b.Property<int>("DrugId")
                        .HasColumnType("int");

                    b.Property<string>("Recomendation")
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("DrugId");

                    b.HasIndex("UserId");

                    b.ToTable("TranslatedDrugs");
                });

            modelBuilder.Entity("Medicine.Entities.Models.Translated.TranslatedDrugsCategory", b =>
                {
                    b.HasBaseType("Medicine.Entities.Models.Translated.Base.TransatedEntityWithDescription");

                    b.Property<int>("DrugCategoryId")
                        .HasColumnType("int");

                    b.HasIndex("DrugCategoryId");

                    b.HasIndex("UserId");

                    b.ToTable("TranslatedDrugsCategory");
                });

            modelBuilder.Entity("Medicine.Entities.Models.Translated.TranslatedTherapy", b =>
                {
                    b.HasBaseType("Medicine.Entities.Models.Translated.Base.TransatedEntityWithDescription");

                    b.Property<int>("TherapyId")
                        .HasColumnType("int");

                    b.HasIndex("TherapyId");

                    b.HasIndex("UserId");

                    b.ToTable("TranslatedTherapy");
                });

            modelBuilder.Entity("DrugDrugCategory", b =>
                {
                    b.HasOne("Medicine.Entities.Models.DrugCategory", null)
                        .WithMany()
                        .HasForeignKey("DrugCategoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Medicine.Entities.Models.Drug", null)
                        .WithMany()
                        .HasForeignKey("DrugsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Medicine.Entities.Models.ActiveElement", b =>
                {
                    b.HasOne("Medicine.Entities.Models.Drug", "Drug")
                        .WithMany("ActiveElements")
                        .HasForeignKey("DrugId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Medicine.Entities.Models.Auth.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Drug");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Medicine.Entities.Models.Course", b =>
                {
                    b.HasOne("Medicine.Entities.Models.CourseGroup", "CourseGroup")
                        .WithMany("Courses")
                        .HasForeignKey("CourseGroupID");

                    b.HasOne("Medicine.Entities.Models.Therapy", "Therapy")
                        .WithMany("Courses")
                        .HasForeignKey("TherapyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Medicine.Entities.Models.Auth.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("CourseGroup");

                    b.Navigation("Therapy");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Medicine.Entities.Models.CourseSettings", b =>
                {
                    b.HasOne("Medicine.Entities.Models.Course", "Course")
                        .WithMany("CourseSettings")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Medicine.Entities.Models.Auth.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Course");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Medicine.Entities.Models.DosageLog", b =>
                {
                    b.HasOne("Medicine.Entities.Models.DosingFrequencyReminder", "DosageRecommendation")
                        .WithMany("DosageLogs")
                        .HasForeignKey("DosageRecommendationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Medicine.Entities.Models.Auth.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("DosageRecommendation");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Medicine.Entities.Models.DosingFrequency", b =>
                {
                    b.HasOne("Medicine.Entities.Models.Course", "Course")
                        .WithMany("DosingFrequencies")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Medicine.Entities.Models.Drug", "Drug")
                        .WithMany()
                        .HasForeignKey("DrugId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Medicine.Entities.Models.Auth.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Course");

                    b.Navigation("Drug");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Medicine.Entities.Models.DosingFrequencyReminder", b =>
                {
                    b.HasOne("Medicine.Entities.Models.DosingFrequency", "DosingFrequency")
                        .WithMany("DosingFrequencyReminders")
                        .HasForeignKey("DosingFrequencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Medicine.Entities.Models.Reminder", "Reminder")
                        .WithMany("DosingFrequencyReminders")
                        .HasForeignKey("ReminderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Medicine.Entities.Models.Auth.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("DosingFrequency");

                    b.Navigation("Reminder");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Medicine.Entities.Models.Drug", b =>
                {
                    b.HasOne("Medicine.Entities.Models.Auth.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Medicine.Entities.Models.DrugCategory", b =>
                {
                    b.HasOne("Medicine.Entities.Models.Auth.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Medicine.Entities.Models.Reminder", b =>
                {
                    b.HasOne("Medicine.Entities.Models.Auth.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Medicine.Entities.Models.Therapy", b =>
                {
                    b.HasOne("Medicine.Entities.Models.Auth.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Medicine.Entities.Models.Translated.TranslatedDosingFrequencyReminder", b =>
                {
                    b.HasOne("Medicine.Entities.Models.DosingFrequencyReminder", "DosageRecommendation")
                        .WithMany()
                        .HasForeignKey("DosageRecommendationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Medicine.Entities.Models.Auth.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("DosageRecommendation");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Medicine.Entities.Models.Auth.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("Medicine.Entities.Models.Auth.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("Medicine.Entities.Models.Auth.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Medicine.Entities.Models.Auth.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Medicine.Entities.Models.Auth.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("Medicine.Entities.Models.Auth.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Medicine.Entities.Models.CourseGroup", b =>
                {
                    b.HasOne("Medicine.Entities.Models.Auth.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Medicine.Entities.Models.Translated.TranslatedActiveElement", b =>
                {
                    b.HasOne("Medicine.Entities.Models.ActiveElement", "ActiveElement")
                        .WithMany("Translations")
                        .HasForeignKey("ActiveElementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Medicine.Entities.Models.Auth.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("ActiveElement");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Medicine.Entities.Models.Translated.TranslatedCourse", b =>
                {
                    b.HasOne("Medicine.Entities.Models.Course", "Course")
                        .WithMany("Translations")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Medicine.Entities.Models.Auth.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Course");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Medicine.Entities.Models.Translated.TranslatedCourseGroup", b =>
                {
                    b.HasOne("Medicine.Entities.Models.CourseGroup", "CourseGroup")
                        .WithMany("Translations")
                        .HasForeignKey("CourseGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Medicine.Entities.Models.Auth.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("CourseGroup");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Medicine.Entities.Models.Translated.TranslatedDosingFrequency", b =>
                {
                    b.HasOne("Medicine.Entities.Models.DosingFrequency", "DosingFrequency")
                        .WithMany("Translations")
                        .HasForeignKey("DosingFrequencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Medicine.Entities.Models.Auth.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("DosingFrequency");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Medicine.Entities.Models.Translated.TranslatedDrugs", b =>
                {
                    b.HasOne("Medicine.Entities.Models.Drug", "Drug")
                        .WithMany("Translations")
                        .HasForeignKey("DrugId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Medicine.Entities.Models.Auth.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Drug");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Medicine.Entities.Models.Translated.TranslatedDrugsCategory", b =>
                {
                    b.HasOne("Medicine.Entities.Models.DrugCategory", "DrugCategory")
                        .WithMany("Translations")
                        .HasForeignKey("DrugCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Medicine.Entities.Models.Auth.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("DrugCategory");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Medicine.Entities.Models.Translated.TranslatedTherapy", b =>
                {
                    b.HasOne("Medicine.Entities.Models.Therapy", "Therapy")
                        .WithMany("Translations")
                        .HasForeignKey("TherapyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Medicine.Entities.Models.Auth.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Therapy");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Medicine.Entities.Models.ActiveElement", b =>
                {
                    b.Navigation("Translations");
                });

            modelBuilder.Entity("Medicine.Entities.Models.Course", b =>
                {
                    b.Navigation("CourseSettings");

                    b.Navigation("DosingFrequencies");

                    b.Navigation("Translations");
                });

            modelBuilder.Entity("Medicine.Entities.Models.DosingFrequency", b =>
                {
                    b.Navigation("DosingFrequencyReminders");

                    b.Navigation("Translations");
                });

            modelBuilder.Entity("Medicine.Entities.Models.DosingFrequencyReminder", b =>
                {
                    b.Navigation("DosageLogs");
                });

            modelBuilder.Entity("Medicine.Entities.Models.Drug", b =>
                {
                    b.Navigation("ActiveElements");

                    b.Navigation("Translations");
                });

            modelBuilder.Entity("Medicine.Entities.Models.DrugCategory", b =>
                {
                    b.Navigation("Translations");
                });

            modelBuilder.Entity("Medicine.Entities.Models.Reminder", b =>
                {
                    b.Navigation("DosingFrequencyReminders");
                });

            modelBuilder.Entity("Medicine.Entities.Models.Therapy", b =>
                {
                    b.Navigation("Courses");

                    b.Navigation("Translations");
                });

            modelBuilder.Entity("Medicine.Entities.Models.CourseGroup", b =>
                {
                    b.Navigation("Courses");

                    b.Navigation("Translations");
                });
#pragma warning restore 612, 618
        }
    }
}
