// <auto-generated />
using System;
using Medicine.DataAccess.Sql;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Medicine.DataAccess.Sql.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Medicine.Entities.Models.ActiveElement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<int?>("DrugId")
                        .HasColumnType("int");

                    b.Property<double>("Quantity")
                        .HasColumnType("float");

                    b.Property<int>("TranslatedActiveElementId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DrugId");

                    b.HasIndex("TranslatedActiveElementId");

                    b.ToTable("ActiveElements");
                });

            modelBuilder.Entity("Medicine.Entities.Models.Base.TransatedEntityWithDescription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("Descrptioin")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DrugCategoryId")
                        .HasColumnType("int");

                    b.Property<int>("Language")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DrugCategoryId");

                    b.ToTable("TransatedEntityWithDescription");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("Medicine.Entities.Models.Course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CourseId")
                        .HasColumnType("int");

                    b.Property<int?>("CourseSettingsId")
                        .HasColumnType("int");

                    b.Property<int>("CourseType")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<int?>("TherapyId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("CourseSettingsId");

                    b.HasIndex("TherapyId");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("Medicine.Entities.Models.CourseSettings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<int?>("MaxAge")
                        .HasColumnType("int");

                    b.Property<int?>("MinAge")
                        .HasColumnType("int");

                    b.Property<int>("Sex")
                        .HasColumnType("int");

                    b.Property<int>("Weight")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("CourseSettings");
                });

            modelBuilder.Entity("Medicine.Entities.Models.DosageLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("DosageRecommendationId")
                        .HasColumnType("int");

                    b.Property<double>("Quantity")
                        .HasColumnType("float");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DosageRecommendationId");

                    b.ToTable("DosageLogs");
                });

            modelBuilder.Entity("Medicine.Entities.Models.DosageRecommendation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<int>("DosingFrequencyId")
                        .HasColumnType("int");

                    b.Property<double>("Quantity")
                        .HasColumnType("float");

                    b.Property<int?>("ReminderId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DosingFrequencyId");

                    b.HasIndex("ReminderId");

                    b.ToTable("DosageRecommendations");
                });

            modelBuilder.Entity("Medicine.Entities.Models.DosingFrequency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<int>("DrugId")
                        .HasColumnType("int");

                    b.Property<int>("IntervalInDays")
                        .HasColumnType("int");

                    b.Property<double>("Total")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("DrugId");

                    b.ToTable("DosingFrequencies");
                });

            modelBuilder.Entity("Medicine.Entities.Models.Drug", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<int?>("DrugId")
                        .HasColumnType("int");

                    b.Property<double>("OneUnitSizeInGramm")
                        .HasColumnType("float");

                    b.Property<string>("Recomendation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DrugId");

                    b.ToTable("Drugs");
                });

            modelBuilder.Entity("Medicine.Entities.Models.DrugCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<int?>("DrugId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DrugId");

                    b.ToTable("DrugCategories");
                });

            modelBuilder.Entity("Medicine.Entities.Models.Reminder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("Descrptioin")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TimeInUtc")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Reminders");
                });

            modelBuilder.Entity("Medicine.Entities.Models.Therapy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Therapies");
                });

            modelBuilder.Entity("Medicine.Entities.Models.UserSettings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Birthday")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<int>("Sex")
                        .HasColumnType("int");

                    b.Property<string>("TimeZone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UserSettings");
                });

            modelBuilder.Entity("Medicine.Entities.Models.Translated.TranslatedActiveElement", b =>
                {
                    b.HasBaseType("Medicine.Entities.Models.Base.TransatedEntityWithDescription");

                    b.ToTable("TranslatedActiveElement");
                });

            modelBuilder.Entity("Medicine.Entities.Models.Translated.TranslatedCourse", b =>
                {
                    b.HasBaseType("Medicine.Entities.Models.Base.TransatedEntityWithDescription");

                    b.Property<int?>("CourseId")
                        .HasColumnType("int");

                    b.Property<string>("Version")
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("CourseId");

                    b.ToTable("TranslatedCourse");
                });

            modelBuilder.Entity("Medicine.Entities.Models.Translated.TranslatedDosageRecommendation", b =>
                {
                    b.HasBaseType("Medicine.Entities.Models.Base.TransatedEntityWithDescription");

                    b.Property<int?>("DosageRecommendationId")
                        .HasColumnType("int");

                    b.HasIndex("DosageRecommendationId");

                    b.ToTable("TranslatedDosageRecommendation");
                });

            modelBuilder.Entity("Medicine.Entities.Models.Translated.TranslatedDosingFrequency", b =>
                {
                    b.HasBaseType("Medicine.Entities.Models.Base.TransatedEntityWithDescription");

                    b.Property<int?>("DosingFrequencyId")
                        .HasColumnType("int");

                    b.HasIndex("DosingFrequencyId");

                    b.ToTable("TranslatedDosingFrequency");
                });

            modelBuilder.Entity("Medicine.Entities.Models.Translated.TranslatedDrugs", b =>
                {
                    b.HasBaseType("Medicine.Entities.Models.Base.TransatedEntityWithDescription");

                    b.Property<int?>("DrugId")
                        .HasColumnType("int");

                    b.HasIndex("DrugId");

                    b.ToTable("TranslatedDrugs");
                });

            modelBuilder.Entity("Medicine.Entities.Models.Translated.TranslatedTherapy", b =>
                {
                    b.HasBaseType("Medicine.Entities.Models.Base.TransatedEntityWithDescription");

                    b.Property<int?>("TherapyId")
                        .HasColumnType("int");

                    b.HasIndex("TherapyId");

                    b.ToTable("TranslatedTherapy");
                });

            modelBuilder.Entity("Medicine.Entities.Models.ActiveElement", b =>
                {
                    b.HasOne("Medicine.Entities.Models.Drug", null)
                        .WithMany("ActiveElements")
                        .HasForeignKey("DrugId");

                    b.HasOne("Medicine.Entities.Models.Translated.TranslatedActiveElement", "TranslatedActiveElement")
                        .WithMany()
                        .HasForeignKey("TranslatedActiveElementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TranslatedActiveElement");
                });

            modelBuilder.Entity("Medicine.Entities.Models.Base.TransatedEntityWithDescription", b =>
                {
                    b.HasOne("Medicine.Entities.Models.DrugCategory", null)
                        .WithMany("TranslatedDrugsCategory")
                        .HasForeignKey("DrugCategoryId");
                });

            modelBuilder.Entity("Medicine.Entities.Models.Course", b =>
                {
                    b.HasOne("Medicine.Entities.Models.Course", null)
                        .WithMany("CourseGroup")
                        .HasForeignKey("CourseId");

                    b.HasOne("Medicine.Entities.Models.CourseSettings", "CourseSettings")
                        .WithMany()
                        .HasForeignKey("CourseSettingsId");

                    b.HasOne("Medicine.Entities.Models.Therapy", "Therapy")
                        .WithMany("Courses")
                        .HasForeignKey("TherapyId");

                    b.Navigation("CourseSettings");

                    b.Navigation("Therapy");
                });

            modelBuilder.Entity("Medicine.Entities.Models.DosageLog", b =>
                {
                    b.HasOne("Medicine.Entities.Models.DosageRecommendation", "DosageRecommendation")
                        .WithMany("DosageLogs")
                        .HasForeignKey("DosageRecommendationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DosageRecommendation");
                });

            modelBuilder.Entity("Medicine.Entities.Models.DosageRecommendation", b =>
                {
                    b.HasOne("Medicine.Entities.Models.DosingFrequency", "DosingFrequency")
                        .WithMany("DosageRecommendations")
                        .HasForeignKey("DosingFrequencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Medicine.Entities.Models.Reminder", null)
                        .WithMany("DosageRecommendations")
                        .HasForeignKey("ReminderId");

                    b.Navigation("DosingFrequency");
                });

            modelBuilder.Entity("Medicine.Entities.Models.DosingFrequency", b =>
                {
                    b.HasOne("Medicine.Entities.Models.Course", "Course")
                        .WithMany("DosingFrequencies")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Medicine.Entities.Models.Drug", "Drug")
                        .WithMany()
                        .HasForeignKey("DrugId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Drug");
                });

            modelBuilder.Entity("Medicine.Entities.Models.Drug", b =>
                {
                    b.HasOne("Medicine.Entities.Models.Drug", null)
                        .WithMany("SimilarPreparate")
                        .HasForeignKey("DrugId");
                });

            modelBuilder.Entity("Medicine.Entities.Models.DrugCategory", b =>
                {
                    b.HasOne("Medicine.Entities.Models.Drug", null)
                        .WithMany("DrugCategory")
                        .HasForeignKey("DrugId");
                });

            modelBuilder.Entity("Medicine.Entities.Models.Translated.TranslatedActiveElement", b =>
                {
                    b.HasOne("Medicine.Entities.Models.Base.TransatedEntityWithDescription", null)
                        .WithOne()
                        .HasForeignKey("Medicine.Entities.Models.Translated.TranslatedActiveElement", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Medicine.Entities.Models.Translated.TranslatedCourse", b =>
                {
                    b.HasOne("Medicine.Entities.Models.Course", null)
                        .WithMany("TranslatedCourses")
                        .HasForeignKey("CourseId");

                    b.HasOne("Medicine.Entities.Models.Base.TransatedEntityWithDescription", null)
                        .WithOne()
                        .HasForeignKey("Medicine.Entities.Models.Translated.TranslatedCourse", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Medicine.Entities.Models.Translated.TranslatedDosageRecommendation", b =>
                {
                    b.HasOne("Medicine.Entities.Models.DosageRecommendation", null)
                        .WithMany("TranslatedDosageRecommendations")
                        .HasForeignKey("DosageRecommendationId");

                    b.HasOne("Medicine.Entities.Models.Base.TransatedEntityWithDescription", null)
                        .WithOne()
                        .HasForeignKey("Medicine.Entities.Models.Translated.TranslatedDosageRecommendation", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Medicine.Entities.Models.Translated.TranslatedDosingFrequency", b =>
                {
                    b.HasOne("Medicine.Entities.Models.DosingFrequency", null)
                        .WithMany("TranslatedDosingFrequency")
                        .HasForeignKey("DosingFrequencyId");

                    b.HasOne("Medicine.Entities.Models.Base.TransatedEntityWithDescription", null)
                        .WithOne()
                        .HasForeignKey("Medicine.Entities.Models.Translated.TranslatedDosingFrequency", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Medicine.Entities.Models.Translated.TranslatedDrugs", b =>
                {
                    b.HasOne("Medicine.Entities.Models.Drug", null)
                        .WithMany("TranslatedDrugs")
                        .HasForeignKey("DrugId");

                    b.HasOne("Medicine.Entities.Models.Base.TransatedEntityWithDescription", null)
                        .WithOne()
                        .HasForeignKey("Medicine.Entities.Models.Translated.TranslatedDrugs", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Medicine.Entities.Models.Translated.TranslatedTherapy", b =>
                {
                    b.HasOne("Medicine.Entities.Models.Base.TransatedEntityWithDescription", null)
                        .WithOne()
                        .HasForeignKey("Medicine.Entities.Models.Translated.TranslatedTherapy", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Medicine.Entities.Models.Therapy", null)
                        .WithMany("TranslatedTherapies")
                        .HasForeignKey("TherapyId");
                });

            modelBuilder.Entity("Medicine.Entities.Models.Course", b =>
                {
                    b.Navigation("CourseGroup");

                    b.Navigation("DosingFrequencies");

                    b.Navigation("TranslatedCourses");
                });

            modelBuilder.Entity("Medicine.Entities.Models.DosageRecommendation", b =>
                {
                    b.Navigation("DosageLogs");

                    b.Navigation("TranslatedDosageRecommendations");
                });

            modelBuilder.Entity("Medicine.Entities.Models.DosingFrequency", b =>
                {
                    b.Navigation("DosageRecommendations");

                    b.Navigation("TranslatedDosingFrequency");
                });

            modelBuilder.Entity("Medicine.Entities.Models.Drug", b =>
                {
                    b.Navigation("ActiveElements");

                    b.Navigation("DrugCategory");

                    b.Navigation("SimilarPreparate");

                    b.Navigation("TranslatedDrugs");
                });

            modelBuilder.Entity("Medicine.Entities.Models.DrugCategory", b =>
                {
                    b.Navigation("TranslatedDrugsCategory");
                });

            modelBuilder.Entity("Medicine.Entities.Models.Reminder", b =>
                {
                    b.Navigation("DosageRecommendations");
                });

            modelBuilder.Entity("Medicine.Entities.Models.Therapy", b =>
                {
                    b.Navigation("Courses");

                    b.Navigation("TranslatedTherapies");
                });
#pragma warning restore 612, 618
        }
    }
}
